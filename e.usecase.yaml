# This is a use case of attaching a cache server to a frontend server. in node 1 , cache server 1 and frontend server 1 ; in node 2 ,cache server 2 and frontend server 2;  in node 3 , cache server 3 and frontend server 3 ; The frontend server will be attached to a cache server. The cache server will be created in such a way that the pods will not be created on the same node. This is done using podAntiAffinity. The frontend server will be created in such a way that the pods will be created on the same node. 

# This is a deployment file which will create 3 replicas of redis server

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cache
spec:
  selector:
    matchLabels:
      app: store
  replicas: 3
  template:
    metadata:
      labels:
        app: store
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - store
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: redis-server
        image: redis:3.2-alpine
#         resources:
#           requests:
#             memory: "100Mi"
#             cpu: "100m"
#           limits:
#             memory: "200Mi"
#             cpu: "200m"
      tolerations:
        - key: "node"
          operator: "Equal"
          value: "firstnode"
          effect: "NoSchedule"
---
# This is a deployment file which will create 3 replicas of frontend server 
# here the rule every frontend server should be attached to a cache server is implemented using podAffinity and also frontend server should not be created on the same node is implemented using podAntiAffinity

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-server
spec:
  selector:
    matchLabels:
      app: web-store
  replicas: 3
  template:
    metadata:
      labels:
        app: web-store
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - web-store
            topologyKey: "kubernetes.io/hostname"
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - store
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: web-app
        image: nginx:1.16-alpine
        # resources:
        #   requests:
        #     memory: "100Mi"
        #     cpu: "100m"
        #   limits:
        #     memory: "200Mi"
        #     cpu: "200m"